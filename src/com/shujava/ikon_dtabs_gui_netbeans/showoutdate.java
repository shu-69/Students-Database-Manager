/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.shujava.ikon_dtabs_gui_netbeans;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Objects;
import javax.swing.JOptionPane;

/**
 *
 * @author shubh
 */
public class showoutdate extends javax.swing.JFrame {

    /**
     * Creates new form showoutdate
     */
    static int sizeofarr = 0;
    static String[] listarr = new String[students.a];
    static int marki;

    public showoutdate() {
        initComponents();
        myinitcomponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void myinitcomponents() {
        jLabel27.setVisible(false);
        rollinp.setVisible(false);
        jLabel1.setVisible(false);
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel24 = new javax.swing.JLabel();
        rolllinp = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        wrnlbl = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        DD = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        MM = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        YYYY = new javax.swing.JTextField();
        searchbutt = new com.k33ptoo.components.KButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtarea = new javax.swing.JTextArea();
        markpass = new com.k33ptoo.components.KButton();
        closebutt = new com.k33ptoo.components.KButton();
        findbutt = new com.k33ptoo.components.KButton();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        unmarkpass = new com.k33ptoo.components.KButton();
        jLabel28 = new javax.swing.JLabel();
        rollinp = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel24.setText("Enter Registration No. :");

        rolllinp.setBackground(new Color(0,0,0,0));
        rolllinp.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        rolllinp.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        rolllinp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rolllinp.setOpaque(false);
        rolllinp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rolllinpActionPerformed(evt);
            }
        });

        setTitle("Show Outdated students");
        setMinimumSize(new java.awt.Dimension(1100, 592));
        setPreferredSize(new java.awt.Dimension(1100, 592));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(2, 45, 145));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        wrnlbl.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        wrnlbl.setForeground(new java.awt.Color(204, 0, 0));
        jPanel2.add(wrnlbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 290, 20));

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        jLabel25.setText("From Date of Admission :");
        jPanel2.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        DD.setBackground(new Color (0,0,0,0));
        DD.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        DD.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        DD.setOpaque(false);
        DD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DDKeyPressed(evt);
            }
        });
        jPanel2.add(DD, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 30, 30));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel14.setText(" /");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 20, 40));

        MM.setBackground(new Color (0,0,0,0));
        MM.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        MM.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        MM.setOpaque(false);
        jPanel2.add(MM, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 10, 30, 30));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setText(" /");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, 20, 40));

        YYYY.setBackground(new Color (0,0,0,0));
        YYYY.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        YYYY.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 0, 0)));
        YYYY.setOpaque(false);
        YYYY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YYYYActionPerformed(evt);
            }
        });
        YYYY.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                YYYYKeyPressed(evt);
            }
        });
        jPanel2.add(YYYY, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, 60, 30));

        searchbutt.setBorder(null);
        searchbutt.setText("Search");
        searchbutt.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchbutt.setkEndColor(new java.awt.Color(255, 255, 255));
        searchbutt.setkHoverEndColor(new java.awt.Color(255, 255, 255));
        searchbutt.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        searchbutt.setkHoverStartColor(new java.awt.Color(51, 51, 255));
        searchbutt.setkStartColor(new java.awt.Color(51, 51, 255));
        searchbutt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbuttActionPerformed(evt);
            }
        });
        jPanel2.add(searchbutt, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, 100, 30));

        list.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(list);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 70, 302, 410));

        txtarea.setColumns(20);
        txtarea.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
        txtarea.setRows(5);
        jScrollPane2.setViewportView(txtarea);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(349, 70, 590, 410));

        markpass.setBorder(null);
        markpass.setText("Mark as Passout");
        markpass.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        markpass.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        markpass.setkEndColor(new java.awt.Color(102, 102, 255));
        markpass.setkHoverEndColor(new java.awt.Color(51, 51, 255));
        markpass.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        markpass.setkHoverStartColor(new java.awt.Color(102, 102, 255));
        markpass.setkStartColor(new java.awt.Color(102, 102, 255));
        markpass.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        markpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markpassActionPerformed(evt);
            }
        });
        jPanel2.add(markpass, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 370, 120, 26));
        markpass.getAccessibleContext().setAccessibleName("");

        closebutt.setBorder(null);
        closebutt.setText("Close");
        closebutt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        closebutt.setkFillButton(false);
        closebutt.setkForeGround(new java.awt.Color(102, 102, 102));
        closebutt.setkStartColor(new java.awt.Color(255, 0, 0));
        closebutt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebuttActionPerformed(evt);
            }
        });
        closebutt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                closebuttKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                closebuttKeyTyped(evt);
            }
        });
        jPanel2.add(closebutt, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 450, 120, 26));

        findbutt.setBorder(null);
        findbutt.setText("Find");
        findbutt.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        findbutt.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        findbutt.setkFillButton(false);
        findbutt.setkForeGround(new java.awt.Color(102, 102, 102));
        findbutt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findbuttActionPerformed(evt);
            }
        });
        jPanel2.add(findbutt, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 330, 120, 26));

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel26.setText(" Students list :");
        jPanel2.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 56, -1, -1));

        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel27.setText("Reg No. :");
        jPanel2.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 280, 60, 20));

        unmarkpass.setBorder(null);
        unmarkpass.setText("Unmark as Passout");
        unmarkpass.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        unmarkpass.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        unmarkpass.setkEndColor(new java.awt.Color(102, 102, 255));
        unmarkpass.setkHoverEndColor(new java.awt.Color(51, 51, 255));
        unmarkpass.setkHoverForeGround(new java.awt.Color(255, 255, 255));
        unmarkpass.setkHoverStartColor(new java.awt.Color(102, 102, 255));
        unmarkpass.setkStartColor(new java.awt.Color(102, 102, 255));
        unmarkpass.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        unmarkpass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unmarkpassActionPerformed(evt);
            }
        });
        jPanel2.add(unmarkpass, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 410, 120, 26));

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        jLabel28.setText("  Details :");
        jPanel2.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(344, 54, 60, 20));

        rollinp.setBackground(new Color(0,0,0,0));
        rollinp.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
        rollinp.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        rollinp.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rollinp.setOpaque(false);
        rollinp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollinpActionPerformed(evt);
            }
        });
        rollinp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                rollinpKeyPressed(evt);
            }
        });
        jPanel2.add(rollinp, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 300, 100, -1));

        jLabel1.setText("S");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1060, 300, 20, 20));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 1100, 520));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1120, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void rolllinpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rolllinpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rolllinpActionPerformed

    private void YYYYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YYYYActionPerformed

    }//GEN-LAST:event_YYYYActionPerformed

    private void markpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markpassActionPerformed

        students.ispass[marki] = true;
        students.saveData();
        wrnlbl.setText(students.name[marki] + " is Marked as Passout");
    }//GEN-LAST:event_markpassActionPerformed

    private void closebuttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebuttActionPerformed
        showoutdate.this.hide();
    }//GEN-LAST:event_closebuttActionPerformed

    private void findbuttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findbuttActionPerformed
        jLabel27.setVisible(true);
        rollinp.setVisible(true);
        jLabel1.setVisible(true);
    }//GEN-LAST:event_findbuttActionPerformed

    private void searchbuttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbuttActionPerformed
        myinitcomponents();
        boolean found = false;
        wrnlbl.setText("");
        try {
            if (Integer.parseInt(DD.getText()) > 0 && Integer.parseInt(DD.getText()) <= 31 && Integer.parseInt(MM.getText()) > 0 && Integer.parseInt(MM.getText()) <= 12 && YYYY.getText().length() == 4) {
                int currrDD = Integer.parseInt(DD.getText());
                int currMM = Integer.parseInt(MM.getText());
                int currYYYY = Integer.parseInt(YYYY.getText());
                int prevDD;
                int prevMM;
                int prevYYYY;
                for (int i = 0; i < students.a; i++) {
                    if (students.ispass[i] == false) {
                        String temppdate = "";
                        int matchat = 0;
                        for (int j = 0; j < students.dateofaddmission[i].length(); j++) {
                            if (students.dateofaddmission[i].charAt(j) == ' ' || students.dateofaddmission[i].charAt(j) == '|') {
                                if (temppdate.length() > 0) {
                                    String DD = "";
                                    String MM = "";
                                    String YYYY = "";
                                    for (int a = 0; a < temppdate.length(); a++) {
                                        if (temppdate.charAt(a) == '/') {
                                            for (int b = a + 1; b < temppdate.length(); b++) {
                                                if (temppdate.charAt(b) == '/') {
                                                    for (int c = b + 1; c < temppdate.length(); c++) {
                                                        YYYY += temppdate.charAt(c);
                                                        b = temppdate.length();
                                                        a = temppdate.length();
                                                    }
                                                } else {
                                                    MM += temppdate.charAt(b);
                                                }
                                            }
                                        } else {
                                            DD += temppdate.charAt(a);
                                        }
                                    }
                                    prevDD = Integer.parseInt(DD);
                                    prevMM = Integer.parseInt(MM);
                                    prevYYYY = Integer.parseInt(YYYY);
                                    boolean check = false;
                                    if (prevYYYY > currYYYY) {
                                        if (prevYYYY == currYYYY && prevMM < currMM && prevDD < currrDD) {
                                        } else {
                                            check = true;
                                        }
                                    }
                                    if (prevYYYY == currYYYY) {
                                        if (currMM > prevMM || currrDD > prevDD) {
                                            check = false;
                                        } else {
                                            check = true;
                                        }
                                    }
                                    if (check == true) {
                                        int newmatchat = (matchat - temppdate.length());
                                        String cdur = "";
                                        int dur;
                                        for (int k = newmatchat; k < students.duration[i].length(); k++) {
                                            if (students.duration[i].charAt(k) == ' ') {
                                                break;
                                            } else {
                                                cdur += students.duration[i].charAt(k);
                                            }
                                        }
                                        dur = Integer.parseInt(cdur);        // Working perfectly
                                        int days = (dur * 30) + (dur / 2);  // matchat = 0;
                                        int newDD = prevDD, newMM = prevMM, newYYYY = prevYYYY;
                                        int count = 0;
                                        while (count != days) {
                                            if (newDD == 31) {
                                                if (newMM == 12) {
                                                    newYYYY++;
                                                    newMM = 1;
                                                    newDD = 1;
                                                } else {
                                                    newMM++;
                                                    newDD = 1;
                                                }
                                            } else {
                                                newDD++;
                                            }
                                            count++;
                                        }
                                        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                                        LocalDate now = LocalDate.now();
                                        String currdate = dtf.format(now);
                                        String nowDD = "";
                                        String nowMM = "";
                                        String nowYYYY = "";
                                        for (int l = 0; l < currdate.length(); l++) {
                                            if (currdate.charAt(l) == '-') {
                                                for (int a = l + 1; a < currdate.length(); a++) {
                                                    if (currdate.charAt(a) == '-') {
                                                        for (int c = a + 1; c < currdate.length(); c++) {
                                                            nowYYYY += currdate.charAt(c);
                                                            a = currdate.length();
                                                            l = currdate.length();
                                                        }
                                                    } else {
                                                        nowMM += currdate.charAt(a);
                                                    }
                                                }
                                            } else {
                                                nowDD += currdate.charAt(l);
                                            }
                                        }
                                        int intnowDD = Integer.parseInt(nowDD);
                                        int intnowMM = Integer.parseInt(nowMM);
                                        int intnowYYYY = Integer.parseInt(nowYYYY);
                                        boolean check2 = false;
                                        if (intnowYYYY > newYYYY) {
                                            check2 = true;
                                        }
                                        if (intnowYYYY == newYYYY) {
                                            if (newMM > intnowMM || newDD > intnowDD) {
                                                check2 = false;
                                            } else {
                                                check2 = true;
                                            }
                                        }
                                        if (check2 == true) {
                                            listarr[sizeofarr] = students.roll[i];
                                            System.out.println(students.roll[i]);
                                            sizeofarr++;
                                            found = true;
                                            j = students.dateofaddmission[i].length();
                                        }
                                    }
                                }
                                temppdate = "";
                            } else {
                                temppdate += students.dateofaddmission[i].charAt(j);
                            }
                            matchat++;
                        }
                    }

                }
                list.setListData(listarr);
            } else {
                wrnlbl.setText("Check Date and try again");
            }
        } catch (NumberFormatException e) {
            wrnlbl.setText("Check Date and try again");
        }
        if (found == false) {
            wrnlbl.setText("No students found");
        }

    }//GEN-LAST:event_searchbuttActionPerformed

    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        String reg = list.getSelectedValue();
        txtarea.setText("\n");
        for (int i = 0; i < students.a; i++) {
            if (Objects.equals(reg, students.roll[i])) {
                txtarea.append("  Name              : " + students.name[i] + "\n"
                        + ("  Fathers Name      : " + students.fname[i] + "\n")
                        + ("  Registration No.  : " + students.roll[i] + "\n")
                        + ("  Contact No.       : " + students.phno[i] + "\n")
                        + ("  DOB               : " + students.dob[i] + "\n")
                        + ("  Gender            : " + students.gender[i] + "\n")
                        + ("  Category          : " + students.category[i] + "\n")
                        + ("  Address           : " + students.address[i] + "\n")
                        + ("  Courses           : " + students.course[i] + "\n")
                        + ("  Course Fee        : " + students.fee[i] + "\n")
                        + ("  Fee Paid          : " + students.paid[i] + "\n")
                        + ("  Fee Dues          : " + students.dues[i] + "\n")
                        + ("  Date of Admission : " + students.dateofaddmission[i] + "\n")
                        + "  Course Duration   : " + students.duration[i] + "\n");
                marki = i;
                break;
            }
        }
    }//GEN-LAST:event_listMouseClicked

    private void unmarkpassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unmarkpassActionPerformed
        students.ispass[marki] = false;
        students.saveData();
        wrnlbl.setText(students.name[marki] + " is Unmarked as Passout");
    }//GEN-LAST:event_unmarkpassActionPerformed

    private void closebuttKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_closebuttKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_closebuttKeyPressed

    private void closebuttKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_closebuttKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_closebuttKeyTyped

    private void rollinpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollinpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rollinpActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        String roll = rollinp.getText();
        boolean check = false;
        for (int i = 0; i < listarr.length; i++) {
            if (Objects.equals(roll, listarr[i])) {
                list.setSelectedIndex(i);
                check = true;
                for (int j = 0; j < students.a; j++) {
                    if (Objects.equals(listarr[i], students.roll[j])) {
                        txtarea.setText("\n");
                        txtarea.append("  Name              : " + students.name[j] + "\n"
                                + ("  Fathers Name      : " + students.fname[j] + "\n")
                                + ("  Registration No.  : " + students.roll[j] + "\n")
                                + ("  Contact No.       : " + students.phno[j] + "\n")
                                + ("  DOB               : " + students.dob[j] + "\n")
                                + ("  Gender            : " + students.gender[j] + "\n")
                                + ("  Category          : " + students.category[j] + "\n")
                                + ("  Address           : " + students.address[j] + "\n")
                                + ("  Courses           : " + students.course[j] + "\n")
                                + ("  Course Fee        : " + students.fee[j] + "\n")
                                + ("  Fee Paid          : " + students.paid[j] + "\n")
                                + ("  Fee Dues          : " + students.dues[j] + "\n")
                                + ("  Date of Admission : " + students.dateofaddmission[j] + "\n")
                                + "  Course Duration   : " + students.duration[j] + "\n");
                        marki = j;
                        break;
                    }
                }
                break;
            }
        }
        if (check == false) {
            wrnlbl.setText(roll + " didn't match to following list");
        }
    }//GEN-LAST:event_jLabel1MouseClicked

    private void YYYYKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_YYYYKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            myinitcomponents();
            boolean found = false;
            wrnlbl.setText("");
            try {
                if (Integer.parseInt(DD.getText()) > 0 && Integer.parseInt(DD.getText()) <= 31 && Integer.parseInt(MM.getText()) > 0 && Integer.parseInt(MM.getText()) <= 12 && YYYY.getText().length() == 4) {
                    int currrDD = Integer.parseInt(DD.getText());
                    int currMM = Integer.parseInt(MM.getText());
                    int currYYYY = Integer.parseInt(YYYY.getText());
                    int prevDD;
                    int prevMM;
                    int prevYYYY;
                    for (int i = 0; i < students.a; i++) {
                        if (students.ispass[i] == false) {
                            String temppdate = "";
                            int matchat = 0;
                            for (int j = 0; j < students.dateofaddmission[i].length(); j++) {
                                if (students.dateofaddmission[i].charAt(j) == ' ' || students.dateofaddmission[i].charAt(j) == '|') {
                                    if (temppdate.length() > 0) {
                                        String DD = "";
                                        String MM = "";
                                        String YYYY = "";
                                        for (int a = 0; a < temppdate.length(); a++) {
                                            if (temppdate.charAt(a) == '/') {
                                                for (int b = a + 1; b < temppdate.length(); b++) {
                                                    if (temppdate.charAt(b) == '/') {
                                                        for (int c = b + 1; c < temppdate.length(); c++) {
                                                            YYYY += temppdate.charAt(c);
                                                            b = temppdate.length();
                                                            a = temppdate.length();
                                                        }
                                                    } else {
                                                        MM += temppdate.charAt(b);
                                                    }
                                                }
                                            } else {
                                                DD += temppdate.charAt(a);
                                            }
                                        }
                                        prevDD = Integer.parseInt(DD);
                                        prevMM = Integer.parseInt(MM);
                                        prevYYYY = Integer.parseInt(YYYY);
                                        boolean check = false;
                                        if (prevYYYY > currYYYY) {
                                            if (prevYYYY == currYYYY && prevMM < currMM && prevDD < currrDD) {
                                            } else {
                                                check = true;
                                            }
                                        }
                                        if (prevYYYY == currYYYY) {
                                            if (currMM > prevMM || currrDD > prevDD) {
                                                check = false;
                                            } else {
                                                check = true;
                                            }
                                        }
                                        if (check == true) {
                                            int newmatchat = (matchat - temppdate.length());
                                            String cdur = "";
                                            int dur;
                                            for (int k = newmatchat; k < students.duration[i].length(); k++) {
                                                if (students.duration[i].charAt(k) == ' ') {
                                                    break;
                                                } else {
                                                    cdur += students.duration[i].charAt(k);
                                                }
                                            }
                                            dur = Integer.parseInt(cdur);        // Working perfectly
                                            int days = (dur * 30) + (dur / 2);  // matchat = 0;
                                            int newDD = prevDD, newMM = prevMM, newYYYY = prevYYYY;
                                            int count = 0;
                                            while (count != days) {
                                                if (newDD == 31) {
                                                    if (newMM == 12) {
                                                        newYYYY++;
                                                        newMM = 1;
                                                        newDD = 1;
                                                    } else {
                                                        newMM++;
                                                        newDD = 1;
                                                    }
                                                } else {
                                                    newDD++;
                                                }
                                                count++;
                                            }
                                            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd-MM-yyyy");
                                            LocalDate now = LocalDate.now();
                                            String currdate = dtf.format(now);
                                            String nowDD = "";
                                            String nowMM = "";
                                            String nowYYYY = "";
                                            for (int l = 0; l < currdate.length(); l++) {
                                                if (currdate.charAt(l) == '-') {
                                                    for (int a = l + 1; a < currdate.length(); a++) {
                                                        if (currdate.charAt(a) == '-') {
                                                            for (int c = a + 1; c < currdate.length(); c++) {
                                                                nowYYYY += currdate.charAt(c);
                                                                a = currdate.length();
                                                                l = currdate.length();
                                                            }
                                                        } else {
                                                            nowMM += currdate.charAt(a);
                                                        }
                                                    }
                                                } else {
                                                    nowDD += currdate.charAt(l);
                                                }
                                            }
                                            int intnowDD = Integer.parseInt(nowDD);
                                            int intnowMM = Integer.parseInt(nowMM);
                                            int intnowYYYY = Integer.parseInt(nowYYYY);
                                            boolean check2 = false;
                                            if (intnowYYYY > newYYYY) {
                                                check2 = true;
                                            }
                                            if (intnowYYYY == newYYYY) {
                                                if (newMM > intnowMM || newDD > intnowDD) {
                                                    check2 = false;
                                                } else {
                                                    check2 = true;
                                                }
                                            }
                                            if (check2 == true) {
                                                listarr[sizeofarr] = students.roll[i];
                                                System.out.println(students.roll[i]);
                                                sizeofarr++;
                                                found = true;
                                                j = students.dateofaddmission[i].length();
                                            }
                                        }
                                    }
                                    temppdate = "";
                                } else {
                                    temppdate += students.dateofaddmission[i].charAt(j);
                                }
                                matchat++;
                            }
                        }

                    }
                    list.setListData(listarr);
                } else {
                    wrnlbl.setText("Check Date and try again");
                }
            } catch (NumberFormatException e) {
                wrnlbl.setText("Check Date and try again");
            }
            if (found == false) {
                wrnlbl.setText("No students found");
            }

        }
    }//GEN-LAST:event_YYYYKeyPressed

    private void rollinpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rollinpKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String roll = rollinp.getText();
            boolean check = false;
            for (int i = 0; i < listarr.length; i++) {
                if (Objects.equals(roll, listarr[i])) {
                    list.setSelectedIndex(i);
                    check = true;
                    for (int j = 0; j < students.a; j++) {
                        if (Objects.equals(listarr[i], students.roll[j])) {
                            txtarea.setText("\n");
                            txtarea.append("  Name              : " + students.name[j] + "\n"
                                    + ("  Fathers Name      : " + students.fname[j] + "\n")
                                    + ("  Registration No.  : " + students.roll[j] + "\n")
                                    + ("  Contact No.       : " + students.phno[j] + "\n")
                                    + ("  DOB               : " + students.dob[j] + "\n")
                                    + ("  Gender            : " + students.gender[j] + "\n")
                                    + ("  Category          : " + students.category[j] + "\n")
                                    + ("  Address           : " + students.address[j] + "\n")
                                    + ("  Courses           : " + students.course[j] + "\n")
                                    + ("  Course Fee        : " + students.fee[j] + "\n")
                                    + ("  Fee Paid          : " + students.paid[j] + "\n")
                                    + ("  Fee Dues          : " + students.dues[j] + "\n")
                                    + ("  Date of Admission : " + students.dateofaddmission[j] + "\n")
                                    + "  Course Duration   : " + students.duration[j] + "\n");
                            marki = j;
                            break;
                        }
                    }
                    break;
                }
            }
            if (check == false) {
                wrnlbl.setText(roll + " didn't match to following list");
            }
        }
    }//GEN-LAST:event_rollinpKeyPressed

    private void DDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DDKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            showoutdate.this.hide();
        }
    }//GEN-LAST:event_DDKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(showoutdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(showoutdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(showoutdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(showoutdate.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new showoutdate().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DD;
    private javax.swing.JTextField MM;
    private javax.swing.JTextField YYYY;
    private com.k33ptoo.components.KButton closebutt;
    private com.k33ptoo.components.KButton findbutt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> list;
    private com.k33ptoo.components.KButton markpass;
    public static javax.swing.JTextField rollinp;
    public static javax.swing.JTextField rolllinp;
    private com.k33ptoo.components.KButton searchbutt;
    private javax.swing.JTextArea txtarea;
    private com.k33ptoo.components.KButton unmarkpass;
    private javax.swing.JLabel wrnlbl;
    // End of variables declaration//GEN-END:variables
}
